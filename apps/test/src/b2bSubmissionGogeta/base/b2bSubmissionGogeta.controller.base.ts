/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { B2bSubmissionGogetaService } from "../b2bSubmissionGogeta.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { B2bSubmissionGogetaCreateInput } from "./B2bSubmissionGogetaCreateInput";
import { B2bSubmissionGogeta } from "./B2bSubmissionGogeta";
import { B2bSubmissionGogetaFindManyArgs } from "./B2bSubmissionGogetaFindManyArgs";
import { B2bSubmissionGogetaWhereUniqueInput } from "./B2bSubmissionGogetaWhereUniqueInput";
import { B2bSubmissionGogetaUpdateInput } from "./B2bSubmissionGogetaUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class B2bSubmissionGogetaControllerBase {
  constructor(
    protected readonly service: B2bSubmissionGogetaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: B2bSubmissionGogeta })
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createB2bSubmissionGogeta(
    @common.Body() data: B2bSubmissionGogetaCreateInput
  ): Promise<B2bSubmissionGogeta> {
    return await this.service.createB2bSubmissionGogeta({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [B2bSubmissionGogeta] })
  @ApiNestedQuery(B2bSubmissionGogetaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async b2bSubmissionGogetas(
    @common.Req() request: Request
  ): Promise<B2bSubmissionGogeta[]> {
    const args = plainToClass(B2bSubmissionGogetaFindManyArgs, request.query);
    return this.service.b2bSubmissionGogetas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: B2bSubmissionGogeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async b2bSubmissionGogeta(
    @common.Param() params: B2bSubmissionGogetaWhereUniqueInput
  ): Promise<B2bSubmissionGogeta | null> {
    const result = await this.service.b2bSubmissionGogeta({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: B2bSubmissionGogeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateB2bSubmissionGogeta(
    @common.Param() params: B2bSubmissionGogetaWhereUniqueInput,
    @common.Body() data: B2bSubmissionGogetaUpdateInput
  ): Promise<B2bSubmissionGogeta | null> {
    try {
      return await this.service.updateB2bSubmissionGogeta({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: B2bSubmissionGogeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteB2bSubmissionGogeta(
    @common.Param() params: B2bSubmissionGogetaWhereUniqueInput
  ): Promise<B2bSubmissionGogeta | null> {
    try {
      return await this.service.deleteB2bSubmissionGogeta({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
