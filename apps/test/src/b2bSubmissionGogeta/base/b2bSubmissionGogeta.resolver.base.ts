/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { B2bSubmissionGogeta } from "./B2bSubmissionGogeta";
import { B2bSubmissionGogetaCountArgs } from "./B2bSubmissionGogetaCountArgs";
import { B2bSubmissionGogetaFindManyArgs } from "./B2bSubmissionGogetaFindManyArgs";
import { B2bSubmissionGogetaFindUniqueArgs } from "./B2bSubmissionGogetaFindUniqueArgs";
import { CreateB2bSubmissionGogetaArgs } from "./CreateB2bSubmissionGogetaArgs";
import { UpdateB2bSubmissionGogetaArgs } from "./UpdateB2bSubmissionGogetaArgs";
import { DeleteB2bSubmissionGogetaArgs } from "./DeleteB2bSubmissionGogetaArgs";
import { B2bSubmissionGogetaService } from "../b2bSubmissionGogeta.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => B2bSubmissionGogeta)
export class B2bSubmissionGogetaResolverBase {
  constructor(
    protected readonly service: B2bSubmissionGogetaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "read",
    possession: "any",
  })
  async _b2bSubmissionGogetasMeta(
    @graphql.Args() args: B2bSubmissionGogetaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [B2bSubmissionGogeta])
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "read",
    possession: "any",
  })
  async b2bSubmissionGogetas(
    @graphql.Args() args: B2bSubmissionGogetaFindManyArgs
  ): Promise<B2bSubmissionGogeta[]> {
    return this.service.b2bSubmissionGogetas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => B2bSubmissionGogeta, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "read",
    possession: "own",
  })
  async b2bSubmissionGogeta(
    @graphql.Args() args: B2bSubmissionGogetaFindUniqueArgs
  ): Promise<B2bSubmissionGogeta | null> {
    const result = await this.service.b2bSubmissionGogeta(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => B2bSubmissionGogeta)
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "create",
    possession: "any",
  })
  async createB2bSubmissionGogeta(
    @graphql.Args() args: CreateB2bSubmissionGogetaArgs
  ): Promise<B2bSubmissionGogeta> {
    return await this.service.createB2bSubmissionGogeta({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => B2bSubmissionGogeta)
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "update",
    possession: "any",
  })
  async updateB2bSubmissionGogeta(
    @graphql.Args() args: UpdateB2bSubmissionGogetaArgs
  ): Promise<B2bSubmissionGogeta | null> {
    try {
      return await this.service.updateB2bSubmissionGogeta({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => B2bSubmissionGogeta)
  @nestAccessControl.UseRoles({
    resource: "B2bSubmissionGogeta",
    action: "delete",
    possession: "any",
  })
  async deleteB2bSubmissionGogeta(
    @graphql.Args() args: DeleteB2bSubmissionGogetaArgs
  ): Promise<B2bSubmissionGogeta | null> {
    try {
      return await this.service.deleteB2bSubmissionGogeta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
